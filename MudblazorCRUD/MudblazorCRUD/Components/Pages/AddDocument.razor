@page "/Document"
@rendermode InteractiveServer

@using MudblazorCRUD.Data
@using MudBlazor
@inject MudblazorCRUD.IService.IAppService appService
@inject MudBlazor.ISnackbar Snackbar


<MudTextField @bind-Value="document.Title" Label="Document Title" Variant="Variant.Text" Margin="Margin.Dense"> </MudTextField>
<MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save</MudButton>

<hr />

<MudTable Items="@GetDocuments()" Dense="@dense" Hover="@hover" Filter="new Func<Document, bool>(FilterFunc)" @bind-document="document">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Documents</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Document ID</MudTh>
        <MudTh>Document Title</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="DocumentId">@context.DocumentID</MudTd>
        <MudTd DataLabel="DocumentTitle">@context.Title</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.DocumentID))" Color="Color.Primary" Icon="@Icons.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.DocumentID))" Color="Color.Secondary" Icon="@Icons.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
<MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
<MudSwitch @bind-Checked="@dense" Color="Color.Primary">Dense</MudSwitch>
<MudText Inline="true">Selected: @document.Title </MudText>

<hr />


@code {
    private bool dense = false;
    private bool hover = true;
    private string searchString = "";

    private Document document = new Document();
    private HashSet<Document> documents = new HashSet<Document>();

    protected override async Task OnInitializedAsync()
    {
        GetDocuments();
    }

    private HashSet<Document> GetDocuments()
    {
        documents = appService.GetDocuments();
        return documents;
    }

    private bool FilterFunc(Document document)
    {
        if (string.IsNullOrEmpty(searchString)) return true;
        if (document.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (document.DocumentID.ToString().Equals(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        return false;
    }

    private void Save()
    {
        appService.Save(document);
        document = new Document();
        Snackbar.Add("Document Saved", Severity.Success);
        GetDocuments();
    }

    private void Edit(int docID)
    {
        document = documents.FirstOrDefault(x => x.DocumentID == docID);
    }

    private void Delete(int docID)
    {
        document = documents.FirstOrDefault(x => x.DocumentID == docID);
        if (document != null)
        {
            appService.Delete(document);
            Snackbar.Add("Document Deleted", Severity.Success);
            GetDocuments();
        }

    }
}